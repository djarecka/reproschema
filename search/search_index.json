{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the ReproSchema documentation","text":""},{"location":"#how-to-use-this-documentation","title":"How to use this documentation","text":"<ul> <li> <p>If you want to know more about the ReproSchema project, its goals and the problems it tries to solve: check out our introduction.</p> </li> <li> <p>The ReproSchema is related to the <code>Semantic Web</code> and relies on <code>linked data</code> and the <code>JSON-LD</code> format. If you are unfamiliar with such things, head over to our FAQ. You do not need an in depth understanding of what those things are to use the ReproSchema but some \"big picture\" conceptual understanding could save you from a lot of confusion. \ud83d\ude09</p> </li> <li> <p>Not sure how the project is organized? Check out the project structure page.</p> </li> <li>Want more details on how the <code>Reproschema</code> itself is structured: check out our schema page</li> </ul>"},{"location":"#how-to-cite","title":"How to cite","text":"<p>If you need to cite ReproSchema, you can use this DOI:</p> <ul> <li>doi:10.5281/zenodo.4064940.</li> </ul>"},{"location":"#licence","title":"Licence","text":"<p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p>"},{"location":"#contributing-and-feedback","title":"Contributing and feedback","text":"<p>We are looking for people to give us feedback on this documentation if anything is unclear by opening an issue on our repository.</p> <p>You can also get in touch on our channel on the mattermost Brainhack.</p> <p>If you want to get started right away and contribute directly to this documentation,you can find references and how-to in the about section.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing-to-the-documentation","title":"Contributing to the documentation","text":"<p>This documentation is a work in progress and we wellcome any input: if something is missing or unclear, let us know by opening an issue on our repository.</p>"},{"location":"CONTRIBUTING/#serving-the-doc-locally","title":"Serving the doc locally","text":"<p>This project uses MkDocs tool with Material theme and extra plugins to generate the website.</p> <p>To test locally, you will need to install the Python dependencies. To do that, type the following commands:</p> <pre><code>git clone https://github.com/ReproNim/reproschema.git\ncd reproschema\npip install -r requirements.txt\n</code></pre> <p>If you are working on your fork, simply replace <code>https://github.com/ReproNim/reproschema.git</code> by <code>git clone git@github.com/&lt;username&gt;/reproschema.git</code> where <code>&lt;username&gt;</code> is your GitHub username</p> <p>Once done, you need to run MkDocs. Simply type:</p> <pre><code>mkdocs serve\n</code></pre> <p>Finally, open up <code>http://127.0.0.1:8000/</code> in your browser, and you should see the default home page of the being displayed.</p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#reproschema","title":"Reproschema","text":""},{"location":"FAQ/#how-can-i-visualize-the-schema-for-a-protocol-or-an-activity","title":"How can I visualize the schema for a <code>protocol</code> or an <code>activity</code>?","text":"<p>If you want to see what the assessment that are already supported by the ReproSchema would look like using our ReproSchema user-interface, you can visualize them directly on schema.repronim.org.</p> <p>If you just want to view a protocol or activity you are developing using the <code>reproschema-ui</code>, you can pass the URL of the schema to the <code>url</code> query parameter like this:</p> <p><code>https://schema.repronim.org/ui/#/?url=url-to-your-schema</code></p> <p>If you are hosting a schema on github, make sure that you are passing the URL of the raw content of the schema. For example, our demo protocol can be accessed at this URL:</p> <p>https://github.com/ReproNim/reproschema-demo-protocol/blob/7ed1ae49279f75acdd57380fff1f8aaff2c7b511/reproschema_demo_protocol/reproschema_demo_protocol_schema</p> <p>But to get access to the raw content of that file you must click on the <code>Raw</code> button once you have opened that page on github that will open this URL:</p> <p>https://raw.githubusercontent.com/ReproNim/reproschema-demo-protocol/7ed1ae49279f75acdd57380fff1f8aaff2c7b511/reproschema_demo_protocol/reproschema_demo_protocol_schema.</p> <p>If you want to visualize the graph represented by the JSON-LD file, we explain how to do this in From JSON to JSON-LD.</p>"},{"location":"FAQ/#which-assessments-tools-willare-supporting-this-standard","title":"Which assessments tools will/are supporting this standard?","text":"<p>At the moment, all the assessments that support this standard are listed in this folder or the reproschema-library repository.</p> <p>If you want to see those different tools in action using our user interface, you can explore them on schema.repronim.org/.</p> <p>The ReproSchema is also used to develop a checklist to improve methods and results reporting in neuroimaging.</p>"},{"location":"FAQ/#linked-data-and-semantic-web","title":"Linked data and semantic web","text":""},{"location":"FAQ/#what-is-the-semantic-web","title":"What is the semantic web?","text":"<p>When you request access to a certain document by clicking on a hyperlink, the computer will give a visual rendering of the html code of this document. But computer used to do that in pretty \"silly\" fashion: it would give you a human-readable version of the content, but the computer would not make the distinction if a certain element in the webpage (for example a paragraph) was referring to a person or a place or a song.</p> <p>What the semantic wed allows is to \"inject\" additional information into a webpage so that a machine can know what certain elements are about (e.g \"this image is about a cat.\") or how they are linked to other elements (on the same page or somewhere else on the web). The tagged content of a webpage thus acquires \"meaning\" from the point of view of the computer, making the semantic content of the code machine-readable.</p>"},{"location":"FAQ/#more-info","title":"More info","text":"<ul> <li>wikipedia article on the semantic web</li> <li>A short video intro to the semantic web by Manu Sporny:</li> </ul>"},{"location":"FAQ/#what-is-linked-data","title":"What is linked data?","text":""},{"location":"FAQ/#the-theory","title":"The theory","text":"<p>The same way that an element in webpage could be given \"meaning\" by tagging with extra information about the nature of this element, the same can be done with data. Hence a given row on a spreadsheet stored somewhere on the web can be tagged and linked to another piece of data on another website.</p> <p>\"Linked data is a way to create a network of standards-based machine interpretable data across different documents and Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web.\" [source]</p> <p>Linked data has some basic principles behind it (adapted from wikipedia):</p> <ul> <li>Use Unique Resources identifiers (URI) to name (identify) things.</li> <li>Use HTTP URIs so that these things can be looked up.</li> <li>Provide useful information about what a name identifies when it's looked up.</li> <li>Refer to other things using their HTTP URI-based names when publishing data on the Web.</li> </ul>"},{"location":"FAQ/#a-more-concrete-example","title":"A more concrete example","text":"<p>As things might be be quite abstract, here is a simple example of linked data to help make things more concrete:</p> <pre><code>{\n  \"@context\": \"http://schema.org\",\n  \"name\": \"Barack Obama\",\n  \"givenName\": \"Barack\",\n  \"familyName\": \"Obama\",\n  \"jobTitle\": \"44th President of the United States\"\n}\n</code></pre> <p>You can see that the file is organised in pairs of <code>\"key\": \"value\"</code>. The <code>@context</code> gives you the base URL of the website where you can find more information about the different properties of this piece of data.</p> <p>What follows (<code>name</code>, <code>givenNAme</code>, <code>familyName</code>, ...) are the actual properties about this data and in front of it the values that this data takes for each property (in this case: \"Barack Obama\", \"Barack\", \"Obama\").</p> <p>Now go and look up what is hiding behind one of those property by going to the URL made of the base URL + the property name, for example https://schema.org/familyName. This is the HTTP URI of <code>familyName</code> and this gives you a description of the <code>familyName</code> property.</p> <p>Well \"So what?\" you might say. Well it also tells you which type of data this property it can be applied to: in this case, the <code>Person</code> type (see its description here). So even though, we never wrote anywhere explicitly that this data describes a person, a computer able to parse that piece of linked data above would \"know\" this.</p>"},{"location":"FAQ/#more-info_1","title":"More info","text":"<ul> <li>Here is a TED talk by Tim Berners-Lee on linked data.</li> <li>A short video intro to linked data by Manu Sporny:</li> </ul>"},{"location":"FAQ/#what-is-json-ld","title":"What is JSON-LD?","text":""},{"location":"FAQ/#what-is-json","title":"What is JSON?","text":"<p>OK before we go for JSON-LD, let's start with JSON. JSON stands for JavaScript Object Notation and is just a specific format for a text file. This type of text file is very often used by website when they need to transmit information to one another.</p> <p>If you want to see an example of how this works, here is dummy example of the response to a request made by one website to another about a list of employees. By default the output of this dummy example is presented in a way that is more pleasing to the human eye, but if you click on <code>Raw Data</code>, you will see the raw unformatted JSON file that was returned by the website. Copy-paste in a text editor, it should like the big ugly and scary one-liner below that we, mere mortals, have no idea what to do with, but that a computer has no problem making sense of.</p> <pre><code>{\"status\":\"success\",\"data\":[{\"id\":\"1\",\"employee_name\":\"Tiger Nixon\",\"employee_salary\":\"320800\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"2\",\"employee_name\":\"Garrett Winters\",\"employee_salary\":\"170750\",\"employee_age\":\"63\",\"profile_image\":\"\"},{\"id\":\"3\",\"employee_name\":\"Ashton Cox\",\"employee_salary\":\"86000\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"4\",\"employee_name\":\"Cedric Kelly\",\"employee_salary\":\"433060\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"5\",\"employee_name\":\"Airi Satou\",\"employee_salary\":\"162700\",\"employee_age\":\"33\",\"profile_image\":\"\"},{\"id\":\"6\",\"employee_name\":\"Brielle Williamson\",\"employee_salary\":\"372000\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"7\",\"employee_name\":\"Herrod Chandler\",\"employee_salary\":\"137500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"8\",\"employee_name\":\"Rhona Davidson\",\"employee_salary\":\"327900\",\"employee_age\":\"55\",\"profile_image\":\"\"},{\"id\":\"9\",\"employee_name\":\"Colleen Hurst\",\"employee_salary\":\"205500\",\"employee_age\":\"39\",\"profile_image\":\"\"},{\"id\":\"10\",\"employee_name\":\"Sonya Frost\",\"employee_salary\":\"103600\",\"employee_age\":\"23\",\"profile_image\":\"\"},{\"id\":\"11\",\"employee_name\":\"Jena Gaines\",\"employee_salary\":\"90560\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"12\",\"employee_name\":\"Quinn Flynn\",\"employee_salary\":\"342000\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"13\",\"employee_name\":\"Charde Marshall\",\"employee_salary\":\"470600\",\"employee_age\":\"36\",\"profile_image\":\"\"},{\"id\":\"14\",\"employee_name\":\"Haley Kennedy\",\"employee_salary\":\"313500\",\"employee_age\":\"43\",\"profile_image\":\"\"},{\"id\":\"15\",\"employee_name\":\"Tatyana Fitzpatrick\",\"employee_salary\":\"385750\",\"employee_age\":\"19\",\"profile_image\":\"\"},{\"id\":\"16\",\"employee_name\":\"Michael Silva\",\"employee_salary\":\"198500\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"17\",\"employee_name\":\"Paul Byrd\",\"employee_salary\":\"725000\",\"employee_age\":\"64\",\"profile_image\":\"\"},{\"id\":\"18\",\"employee_name\":\"Gloria Little\",\"employee_salary\":\"237500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"19\",\"employee_name\":\"Bradley Greer\",\"employee_salary\":\"132000\",\"employee_age\":\"41\",\"profile_image\":\"\"},{\"id\":\"20\",\"employee_name\":\"Dai Rios\",\"employee_salary\":\"217500\",\"employee_age\":\"35\",\"profile_image\":\"\"},{\"id\":\"21\",\"employee_name\":\"Jenette Caldwell\",\"employee_salary\":\"345000\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"22\",\"employee_name\":\"Yuri Berry\",\"employee_salary\":\"675000\",\"employee_age\":\"40\",\"profile_image\":\"\"},{\"id\":\"23\",\"employee_name\":\"Caesar Vance\",\"employee_salary\":\"106450\",\"employee_age\":\"21\",\"profile_image\":\"\"},{\"id\":\"24\",\"employee_name\":\"Doris Wilder\",\"employee_salary\":\"85600\",\"employee_age\":\"23\",\"profile_image\":\"\"}]}\n</code></pre> <p>By the way, if you ever come across such monstrosity and you want to turn into something you as a human being can understand (or least read), you can copy-paste it in a validator-formatter like jsonformatter or jsonlint. This will quickly tell you 1.  whether this is a valid JSON format (eaning if it respects the rules of how a JSON file should be formatted) and 1.  it will highlight and help you navigate the nested and hierarchical nature of the JSON file.</p> <p>OK but let's start with a much simpler example of a JSON file, like the one below which could be the content of JSON file returned by a website when asked about a certain person.</p> <pre><code>{\n  \"name\": \"Barack Obama\",\n  \"givenName\": \"Barack\",\n  \"familyName\": \"Obama\",\n  \"jobTitle\": \"44th President of the United States\"\n}\n</code></pre> <p>Looks familiar? It is very close to the one we had at the end of the previous FAQ section.</p>"},{"location":"FAQ/#from-json-to-json-ld","title":"From JSON to JSON-LD","text":"<p>Now say you would like to use this JSON file to represent a piece of linked-data. The only thing you would need to do in this specific case is to provide the <code>@context</code> line we saw before that will give a precise and unambiguous meaning to the following lines.</p> <pre><code>{\n  \"@context\": \"http://schema.org\",\n  \"name\": \"Barack Obama\",\n  \"givenName\": \"Barack\",\n  \"familyName\": \"Obama\",\n  \"jobTitle\": \"44th President of the United States\"\n}\n</code></pre> <p>\ud83c\udf89 Congratulations! \ud83c\udf89</p> <p>You now have a valid JSON-LD. If you want to make sure it is valid, you can copy-paste that into the JSON-LD playground. If you to to visualize the \"linked\" aspect of that data, you can click on the <code>Visualized</code> tab and this will give you a graph where that connects the different nodes (piece of information to one another).</p> <p>If you want to visualize a more complex graph, we can try that with one of the JSON-LD file that describe one of the <code>protocols</code> of the reproschema like the one here. Actually if you want to test get the raw content of the file you should click on <code>Raw</code>. You can then either use the raw content of the file or the URL of this raw file which should be something like:</p> <pre><code>https://raw.githubusercontent.com/ReproNim/reproschema/741e295d998037629c213ef41cffaaf177f4d014/examples/protocols/protocol1.jsonld\n</code></pre> <p>directly into the JSON-LD playground to see whether it is a valid JSON-LD and how the different elements are connected.</p>"},{"location":"FAQ/#more-info_2","title":"More info","text":"<ul> <li>It would be a stretch to say that the JSON-LD specifications make for a fascinating read that will keep you up at night (although they might but mostly out of frustration) but it is good to know that it is out there in case you eventually need to look something up</li> <li>Two short videos by Manu Sporny about JSON-LD and core mark up features JSON-LD:</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>Tl;DR - Advantages of the current schema representation</p> <ul> <li>Rich contexts for a questionnaire with JSON-LD rather than a \"flat\" csv file.</li> <li>A single source of curated assessments from ReproSchema Library</li> <li>Each <code>item</code> (i.e question), <code>activity</code> (i.e questionnaire), and <code>protocol</code> (i.e set of questionnaires) provides unique and persistent identifiers.</li> <li>Versions of a given questionnaire can be tracked (e.g., PHQ-9, PHQ-8).</li> <li>Allows, supports, and tracks internationalization (e.g. ABCD requires Spanish and English forms).</li> <li>Implementation agnostic \u2013 the schema can be used by several different software packages</li> <li>Uses a linked data graph that can be validated using SHACL.</li> </ul>"},{"location":"introduction/#the-problem","title":"The problem","text":"<p>Cognitive and clinical questionnaires and assessments are used throughout neuroscience. There is little consistency in assessment data acquisition or response representation across studies or laboratories. Each project tends to use its own format and data collection tool (e.g., paper, survey tools, RedCap, LORIS). In the long run, this can be a source of a lot inefficiencies not only in terms data curation but also by diminishing the value of the data less interoperable and reusable. Imagine for example a researcher wanting to run a meta or mega-analysis across several studies. To do this each one would not only need to know which specific assessments were collected, but also how to relate different column names in data spreadsheets to these assessments and across projects.</p> <p>Several efforts have focused on linking the assessments themselves through consistent terminologies and relationships that map to human cognition (e.g., Cognitive Atlas, Cognitive Paradigm Ontology). Other efforts such as the National Institute for Mental Health (NIMH) Data Archive (NDA) and the National Library of Medicine (NLM) Common Data Elements have curated data elements corresponding to the items and calculated scores from these questionnaires. However, these resources are often used to make data consistent and reusable after, rather than during data collection. However, harmonizing data after acquisition is resource intensive and this approach can create a mismatch between collected and submitted data due to human error during the harmonization process. To facilitate tedious harmonization efforts, several projects, over the last two decades, have developed technologies to automatically or interactively align and harmonize data elements (e.g., BIRN mediator, OpenRefine).</p> <p>Given the dynamic and evolving nature of scientific investigation, many questionnaires are altered when used to suit the requirements of a particular study (e.g., different language, selective and new questions). This information linking the specific information used when asking a question is often decoupled from the data element representing the response to the question. When questions are changed, researchers often shoehorn the response into an existing data element, thus creating additional noise. Another drawback to these data elements is that there is often no way to find out which version of a questionnaire was used or how exactly it was scored.</p>"},{"location":"introduction/#our-solution","title":"Our solution","text":"<p>Our simpler solution is to enforce consistency directly at the data acquisition stage by relying on a common <code>schema</code> that encodes how the different elements of the data and / or the metadata relate to one another. This way, all this relational information between these elements is captured from the very start as it is already embedded in the formal description of the assessment. This solution was inspired by the work of CEDAR Metadata Model.</p> <p>In this project we provide a comprehensive set of tools to create and use the schemas, while tracking the source of the schema, and changes to it over time. The ReproSchema project covers:</p> <ol> <li> <p>a schema that can be found in the present repository     that describes the content and relations of the different elements of a questionnaire or set of assessment tools,</p> </li> <li> <p>an associated curated library of reusable common assessments and questionnaires,</p> </li> <li> <p>a python package to help create and validate the schemas of new assessments,</p> </li> <li> <p>a user interface to visualize questionnaire and collect data locally,</p> </li> <li> <p>a backend server to capture the data remotely.</p> </li> </ol> <p>In brief, ReproSchema offers a way to standardize the underlying representation of assessment tools. It comes with an open and accessible library of questionnaires with appropriate conversion (e.g., from/to RedCap) and data collection tools (e.g., MindLogger, RedCap, LORIS - future work) to enable a more consistent acquisition across projects, with data being harmonized by design.</p>"},{"location":"introduction/#general-description","title":"General description","text":"<p>With this schema we can represent:</p> <ul> <li> <p>at the <code>item</code> level, the elements of an individual assessment,     like the questions in a questionnaire</p> </li> <li> <p>at the <code>activity</code> level, an individual assessment that contains a set of <code>items</code>,     like for example a whole questionnaire with a several questions</p> </li> <li> <p>at the <code>protocols</code> level, a collection of <code>activities</code> performed by a participant,     e.g a set of questionnaires used in a study</p> </li> </ul> <p>All those elements are specified text files in a <code>JSON-LD</code> format (JavaScript Object Notation for Linked Data) and each <code>item</code>, <code>activity</code>, and <code>protocol</code> provides unique and persistent identifiers.</p> <p>Below we show an example of one of the possible ways a questionnaire with 3 questions for a study could be organized with a <code>protocol</code> for that study, one <code>activity</code> and 3 <code>items</code>.</p> <pre><code>\u251c\u2500\u2500 activities\n\u2502   \u2514\u2500\u2500 activity1\n\u2502       \u251c\u2500\u2500 activity1_schema.jsonld\n\u2502       \u2514\u2500\u2500 items\n\u2502           \u251c\u2500\u2500 item1.jsonld\n\u2502           \u251c\u2500\u2500 item2.jsonld\n\u2502           \u2514\u2500\u2500 item3.jsonld\n\u2514\u2500\u2500 protocol\n    \u2514\u2500\u2500 protocol1_schema.jsonld\n</code></pre> <p>The ReproSchema can also easily and flexibly specify details how the schema for an assessment should be used. Independently of what solution is chosen in the end by a researcher, a lab, or an institute to display the assessment to their participants or patients (for example whether using an Web-app written in javascript or a mobile app written in React-native), the schema can already specify:</p> <ul> <li> <p>the <code>input type</code> to choose among several user-interface rendering options e.g.,     a Likert scale, a dropdown menu, a multiple choice...</p> </li> <li> <p>the <code>visibility</code> to decide whether a given <code>item</code> or <code>activity</code> should be     displayed to the user and under which conditions,</p> </li> <li> <p>the <code>compute logic</code> of how the total score to the responses on a questionnaire     should be computed</p> </li> </ul> <p>The ReproSchema also allows for internationalization and multiple languages support by making it very easy to keep everything the same except the language displayed by the user interface.</p> <p>Finally ReproSchema allows tracking of variations and version of different assessments tools (e.g., PHQ-9, PHQ-8).</p>"},{"location":"project-structure/","title":"Project structure","text":"<p>The ReproSchema project is organized around several github repositories. The main ones are the following.</p> <ul> <li>reproschema</li> <li>reproschema-library</li> <li>reproschema-py</li> <li>reproschema-ui</li> <li>reproschema-protocol-cookiecutter</li> </ul> <p>A brief description of how they all interact could be along the following lines:</p> <p>If you're gearing up to launch a research project that requires standardized questionnaires, starting with reproschema-protocol-cookiecutter is your best first step. This tool sets you up with a custom protocol for your study, integrating handy features for a smooth setup right from the get-go. You'll have two main paths for adding questionnaires, or activities, to your study:</p> <p>Option 1: Dive into reproschema-library where we've got a stash of ready-made questionnaires. Pick what fits your study, and you're good to go.</p> <p>Option 2: Feeling creative? Craft your own activities with reproschema-py. This tool not only lets you design new activities but also checks that they meet all the ReproSchema standards.</p> <p>Once your protocol is packed with all the activities you need, reproschema-ui automatically steps in. This part of the toolkit lets you see your study in action before you even start, making sure everything's set up just right for gathering data.</p>"},{"location":"project-structure/#reproschema","title":"reproschema","text":"<p>The ReproSchema is like a blueprint for research projects, ensuring everyone collects data in a consistent way, which makes it easier to compare results from different studies. Here\u2019s a simpler breakdown of what\u2019s inside:</p> <ul> <li> <p>Key Terms: These are the building blocks, like common types of answers and data formats, that help everyone understand and use data the same way.</p> </li> <li> <p>How Data is Organized: ReproSchema sorts information into three main layers to keep things neat:</p> <ul> <li>Item Level: This is where individual questions or parts of a survey are detailed, allowing for close examination of each element.</li> <li>Activity Level: At this stage, an entire survey or tool, made up of many items, is grouped together as an \"Activity.\" It gives a complete overview of what the survey involves.</li> <li>Protocols Level: The highest level, a \"Protocol,\" bundles together all the activities a participant will do in a study, providing a comprehensive plan.</li> </ul> </li> <li> <p>Validation: The schema uses special standards (like SHACL files) to make sure the data and forms are up to standard and consistent.</p> </li> <li> <p>Context Files: These files (<code>contexts</code>and <code>terms</code>) specify user-interface details and enhance schema flexibility. They define elements like input types, visibility conditions, and response options, supporting a tailored user experience. Additionally, they enable internationalization and multiple language support for broad applicability.</p> </li> </ul> <p>There is also an <code>example</code> schema that can help give you a quick overview of what the protocol and activity for a study might look like. For more details see the schema section.</p>"},{"location":"project-structure/#reproschema-library","title":"reproschema-library","text":"<p>This repository hosts all the community curated assessments and questionnaires that support the ReproSchema standard.</p> <p>Imagine this as curated library of reusable assessments and questionnaires, from where you can easily pull a copy from rather than having to photocopy a new questionnaire for your next participant or patient. Also you can mix and match items from this library, knowing that the information is tracked in your protocol.</p> <p>All assessments are listed in the <code>activity</code> folder and are served here if you want to visualize them.</p> <ul> <li>Standard Alignment: Each element in the library aligns with the ReproSchema framework, ensuring uniformity in terms and structure and upholding validation protocols for consistency across the ecosystem.</li> <li>Research Protocol Integration: Researchers can utilize these assessments in various combinations to align with specific protocol needs, customizing their application per study objectives. This process can be integrated using the reproschema-protocol-cookiecutter for constructing user interfaces.</li> <li>Collaborative Expansion: The library supports expansion through researcher contributions, allowing adding new, relevant assessments. These contributions are automatically validated using reproschema-py, maintaining the library\u2019s standardization and relevance to evolving research demands.</li> </ul>"},{"location":"project-structure/#reproschema-py","title":"reproschema-py","text":"<p>This is the ReproSchema python library. This is a python Command Line Interface (CLI) that allows you to help create and validate the schemas of new assessments.</p> <ul> <li>Schema Development and Validation: This tool streamlines the creation and validation of new assessment schemas, verifying their alignment with ReproSchema's standards. It rigorously tests protocols, activities, and items to meet predefined specifications.</li> <li>Consistency Assurance: Integrated with the ReproSchema-library and ReproSchema-Protocol-Cookiecutter, reproschema-py validates library assessments for quality and uniformity. It also automatically ensures the consistency of research protocols generated through the ReproSchema-Protocol-Cookiecutter.</li> <li>Interoperability with REDCap: Its capability to convert between REDCap and ReproSchema formats exemplifies its role in harmonizing diverse data collection methods in complex, multi-faceted research environments.</li> </ul>"},{"location":"project-structure/#reproschema-ui","title":"reproschema-ui","text":"<p>This repository contains the code for the user-interface for the ReproSchema to visualize questionnaires and collect data.</p> <p>You can see it in action here</p>"},{"location":"project-structure/#reproschema-protocol-cookiecutter","title":"reproschema-protocol-cookiecutter","text":"<p>The reproschema-protocol-cookiecutter is a straightforward tool that helps you quickly set up a research study. It offers a ready-to-use template for organizing your study's structure and surveys, ensuring everything meets standard guidelines. Think of it as a quick-start guide to get your research project up and running smoothly. A step-by-step guide see here.</p>"},{"location":"project-structure/#other-repositories","title":"Other repositories","text":""},{"location":"project-structure/#demo-protocol","title":"Demo-protocol","text":"<p>This repository contain a full fledge protocol that can be used as demonstration.</p>"},{"location":"project-structure/#reprolib-server","title":"Reprolib-server","text":"<p>This contains some additional information on how the activities are served on https://schema.repronim.org/rl/.</p>"},{"location":"schema/","title":"The schema","text":""},{"location":"schema/#overview","title":"Overview","text":"<p>A simplistic way to describe the Reprochema is to say it is organized in a hierarchical manner with roughly 3 levels with a schema describing each level.</p> <ol> <li> <p>The highest level is the <code>protocol</code> level that originally define a set of assessments or questionnaires to be     included in a given study.     This schema is defined by the Protocol schema.</p> </li> <li> <p>The second level is the <code>activity</code> level that describe a given questionnaire. This level would describe all the questions of this assessment: for example all the items of the Edinburgh handedness inventory would constitute one activity.     This schema is defined by the Activity schema.</p> </li> <li> <p>At a lower level we have the <code>item</code> level where each <code>item</code> represents a question from a given assessment.     On top of containing the text of the actual question, the schema at this level can contain additional     information such as the expected format of the item for the user interface: a boolean     (if this is a yes/no question), a multiple choice (with a list of the response choices),     a float or an integer (if a numerical value is expected)...     This schema is defined by the Field schema.</p> </li> </ol> <p></p> <p>You can see an example of those in the examples folder</p> <p>There are in fact more levels than this each and each level has its own schema:</p> <ul> <li>all of the schemas can be found in the <code>terms</code> folder</li> <li>the Reproschema actually allows for a more complex level nesting than the one described above (e.g you can have an <code>activity</code> within an <code>activity</code>)</li> <li>all the properties of each level are described below in the Properties of ReproSchema objects section</li> </ul>"},{"location":"schema/#detailed-description","title":"Detailed description","text":"<p>The core model of ReproSchema was initially derived from the CEDAR Metadata Model. To accommodate the needs of neuroimaging and other clinical and behavioral protocols and assessments the schema has evolved significantly. These changes include:</p> <ol> <li> <p>Alignment with schema.org and NIDM.     We have used schema.org classes and properties where it maps on to the needs of     the model and extended the model with NIDM elements to harmonize across ReproNim projects.</p> </li> <li> <p>Allowing for structured nested elements in a schema    <code>Protocol &gt; Activity &gt; [Activity | Field &gt; ResponseOption]</code>. This nested    structure provides a flexible schema to represent nested activities, which are    common in biomedical and other domains.</p> </li> </ol> <pre><code>Protocol\n\u251c\u2500\u2500 Activity\n\u2502   \u251c\u2500\u2500 Field\n\u2502   \u2502   \u2514\u2500\u2500 ResponseOption\n\u2502   \u2514\u2500\u2500 Field\n\u2502   \u2502   \u2514\u2500\u2500 ResponseOption\n\u2502   \u251c\u2500\u2500 Activity\n\u2502   \u2502   \u251c\u2500\u2500 Field\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ResponseOption\n\u2502   \u2502   ...\n\u2502   ...\n\u251c\u2500\u2500 Activity\n\u2502   ...\n...\n</code></pre> <ol> <li> <p>Interaction with Git/Github or another Web service to deliver a new <code>protocol</code>,     <code>ativity</code> or <code>field</code> with a persistent URI, while tracking changes associated with     any of these elements. By making every <code>field</code> represented through a persistent URI,     a data collection instrument can link the responses to the exact <code>field</code> that was     used.</p> </li> <li> <p>Addition of computable elements that are derived from the values entered by a participant.</p> </li> <li> <p>Allowing for user interface (UI) elements that allow interaction between the schema     and any implementation that allows collecting data using the schema. By providing     some additional UI elements the provider can guide an implementer to allow for     more complex data collection behavior.</p> </li> </ol> <p>The ReproSchema-UI is a prototype implementation of an UI that leverages these different elements of the schema.</p>"},{"location":"schema/#properties-of-reproschema-objects","title":"Properties of ReproSchema objects","text":"<p>This section lists the core ReproSchema objects and their allowed properties.</p>"},{"location":"schema/#protocol","title":"Protocol","text":"<p>A representation of a study which comprises one or more assessments.</p> <p>URI: http://schema.repronim.org/Protocol</p> Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute landingPage An element (by URL) to point to the protocol readme or landing page. http://schema.repronim.org/landingPage messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject. http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#activity","title":"Activity","text":"<p>An assessment in a protocol.</p> <p>URI: http://schema.repronim.org/Activity</p> Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute cronTable None http://schema.repronim.org/cronTable messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio citation A citation or reference to another creative work, such as another publication, web page, scholarly article, etc. http://schema.org/citation description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject. http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#field","title":"Field","text":"<p>An item in an assessment.</p> <p>URI: http://schema.repronim.org/Field</p> Name Description URI additionalNotesObj A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema. http://schema.repronim.org/additionalNotesObj inputType An element to describe the input type of a Field item. http://schema.repronim.org/inputType preamble The preamble for an assessment http://schema.repronim.org/preamble responseOptions An element (object or by URL)to describe the properties of response of the Field item. http://schema.repronim.org/responseOptions about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject. http://schema.org/image isPartOf Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of. http://schema.org/isPartOf question A sub property of object. A question. http://schema.org/question readonlyValue Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a \"hidden\" input in an HTML form. http://schema.org/readonlyValue schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#additionalproperty","title":"AdditionalProperty","text":"<p>An object to describe the various properties added to assessments and fields.</p> <p>URI: http://schema.repronim.org/AdditionalProperty</p> Name Description URI allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action.  Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#overrideproperty","title":"OverrideProperty","text":"<p>An object to override the various properties added to assessments and fields.</p> <p>URI: http://schema.repronim.org/OverrideProperty</p> Name Description URI isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action.  Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#unitoption","title":"UnitOption","text":"<p>An object to represent a human displayable name alongside the more formal value for units.</p> <p>URI: http://schema.repronim.org/UnitOption</p> Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel"},{"location":"schema/#responseoption","title":"ResponseOption","text":"<p>An element (object or by URL)to describe the properties of response of the Field item.</p> <p>URI: http://schema.repronim.org/ResponseOption</p> Name Description URI choices An array to list the available options for response of the Field item. http://schema.repronim.org/choices datumType Indicates what type of datum the response is (e.g. range,count,scalar etc.) for the Field item. http://schema.repronim.org/datumType multipleChoice Indicates (by bool) if response for the Field item has one or more answer. http://schema.repronim.org/multipleChoice unitOptions A list of objects to represent a human displayable name alongside the more formal value for units. http://schema.repronim.org/unitOptions valueType The type of the response of an item. For example, string, integer, etc. http://schema.repronim.org/valueType maxValue The upper value of some characteristic or property. http://schema.org/maxValue minValue The lower value of some characteristic or property. http://schema.org/minValue unitCode The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. http://schema.org/unitCode"},{"location":"schema/#choice","title":"Choice","text":"<p>An object to describe a response option.</p> <p>URI: http://schema.repronim.org/Choice</p> Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value image An image of the item. This can be a URL or a fully described ImageObject. http://schema.org/image name The name of the item. http://schema.org/name"},{"location":"schema/#computespecification","title":"ComputeSpecification","text":"<p>An object to define computations in an activity or protocol.</p> <p>URI: http://schema.repronim.org/ComputeSpecification</p> Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression variableName The name used to represent an item. http://schema.repronim.org/variableName"},{"location":"schema/#messagespecification","title":"MessageSpecification","text":"<p>An object to define messages in an activity or protocol.</p> <p>URI: http://schema.repronim.org/MessageSpecification</p> Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression message The message to be conditionally displayed for an item. http://schema.repronim.org/message"},{"location":"schema/#additionalnoteobj","title":"AdditionalNoteObj","text":"<p>A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema</p> <p>URI: http://schema.repronim.org/AdditionalNoteObj</p> Name Description URI column An element to define the column name where the note was taken from. http://schema.repronim.org/column source An element to define the source (eg. RedCap, NDA) where the note was taken from. http://schema.repronim.org/source value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value"},{"location":"schema/#responseactivity","title":"ResponseActivity","text":"<p>Captures information about some action that took place. It also links to information (entities) that were used during the activity</p> <p>URI: http://schema.repronim.org/ResponseActivity</p> Name Description URI endedAtTime None http://www.w3.org/ns/prov#endedAtTime generated None http://www.w3.org/ns/prov#generated startedAtTime None http://www.w3.org/ns/prov#startedAtTime used None http://www.w3.org/ns/prov#used wasAssociatedWith None http://www.w3.org/ns/prov#wasAssociatedWith inLanguage The language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also [[availableLanguage]]. http://schema.org/inLanguage"},{"location":"schema/#response","title":"Response","text":"<p>Describes the response of an item.</p> <p>URI: http://schema.repronim.org/Response</p> Name Description URI wasAttributedTo None http://www.w3.org/ns/prov#wasAttributedTo isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value"},{"location":"schema/#participant","title":"Participant","text":"<p>An Agent describing characteristics associated with a participant.</p> <p>URI: http://schema.repronim.org/Participant</p> Name Description URI subject_id The identifier of a participant http://purl.org/nidash/nidm#subject_id"},{"location":"schema/#softwareagent","title":"SoftwareAgent","text":"<p>Captures information about some action that took place. It also links to information (entities) that were used during the activity</p> <p>URI: http://schema.repronim.org/SoftwareAgent</p> Name Description URI url URL of the item. http://schema.org/url version The version of the CreativeWork embodied by a specified resource. http://schema.org/version"},{"location":"tutorials/collecting-demographics-information/","title":"Collecting information about your participant","text":"<p>Before you go and start creating new activities and items to collect the names, surnames and other demographics of your participants make sure you have had a look at these items on the reproschema library:</p> <p>See the demographics_and_background_information_v1 folder:</p> <pre><code>demographics_and_background_information_v1/\n\u2514\u2500\u2500 items\n    \u251c\u2500\u2500 age_months\n    \u251c\u2500\u2500 age_years\n    \u251c\u2500\u2500 ann_fam_income\n    \u251c\u2500\u2500 child_out_psych_cur\n    \u251c\u2500\u2500 child_out_psych_ever\n    \u251c\u2500\u2500 countryOfBirth\n    \u251c\u2500\u2500 demo_init\n    \u251c\u2500\u2500 demo_rpt_date\n    \u251c\u2500\u2500 document\n    \u251c\u2500\u2500 doe\n    \u251c\u2500\u2500 education_level\n    \u251c\u2500\u2500 email\n    \u251c\u2500\u2500 ethnic_category\n    \u251c\u2500\u2500 ethnic_category_informant\n    \u251c\u2500\u2500 fluentLanguages\n    \u251c\u2500\u2500 fullName\n    \u251c\u2500\u2500 handedness\n    \u251c\u2500\u2500 healthCondition\n    \u251c\u2500\u2500 inpatient_psych\n    \u251c\u2500\u2500 inpatient_treat_age\n    \u251c\u2500\u2500 inpatient_treat_dur\n    \u251c\u2500\u2500 inpatient_treatments\n    \u251c\u2500\u2500 interviewed_who\n    \u251c\u2500\u2500 interview_type\n    \u251c\u2500\u2500 knownLanguages\n    \u251c\u2500\u2500 last_period\n    \u251c\u2500\u2500 medication\n    \u251c\u2500\u2500 menarche_start\n    \u251c\u2500\u2500 meneses\n    \u251c\u2500\u2500 mentalHealth\n    \u251c\u2500\u2500 nativeLanguage\n    \u251c\u2500\u2500 other_persons_instructions\n    \u251c\u2500\u2500 outpatient_treat_age\n    \u251c\u2500\u2500 outpatient_treatments\n    \u251c\u2500\u2500 outpatient_treat_weeks\n    \u251c\u2500\u2500 parent_relationship\n    \u251c\u2500\u2500 parent_relationship_1\n    \u251c\u2500\u2500 parent_relationship_2\n    \u251c\u2500\u2500 participant_education\n    \u251c\u2500\u2500 participant_id\n    \u251c\u2500\u2500 particpant_grade_level\n    \u251c\u2500\u2500 person1_education\n    \u251c\u2500\u2500 person1_id\n    \u251c\u2500\u2500 person1_occ_lvl\n    \u251c\u2500\u2500 person1_other_id\n    \u251c\u2500\u2500 person2_education\n    \u251c\u2500\u2500 person2_exist\n    \u251c\u2500\u2500 person2_id\n    \u251c\u2500\u2500 person2_occ_lvl\n    \u251c\u2500\u2500 person2_other_id\n    \u251c\u2500\u2500 race_category\n    \u251c\u2500\u2500 race_category_informant\n    \u251c\u2500\u2500 raceEthnicity\n    \u251c\u2500\u2500 record_id\n    \u251c\u2500\u2500 religious_category\n    \u251c\u2500\u2500 sex\n    \u251c\u2500\u2500 share_data\n    \u251c\u2500\u2500 stateOfBirth\n    \u251c\u2500\u2500 stateOfResidence\n    \u2514\u2500\u2500 verification_id\n</code></pre> <pre><code>{\n    \"@context\": [ \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n        {\n            \"demo\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/demographics_and_background_information_v1/items\"\n        }\n    ],\n    \"@type\": \"reproschema:Activity\",\n    \"@id\": \"demographics.jsonld\",\n    \"prefLabel\": \"demographics\",\n    \"description\": \"information about the participant\",\n    \"schemaVersion\": \"1.0.0-rc1\",\n    \"version\": \"0.0.1\",\n    \"ui\": {\n        \"order\": [\n            \"demo:participant_id\",\n            \"demo:fullName\",\n            \"demo:sex\",\n            \"demo:age_years\",\n            \"demo:email\",\n            \"demo:participant_education\",\n            \"demo:nativeLanguage\",\n            \"demo:healthCondition\",\n            \"demo:mentalHealth\",\n            \"demo:share_data\",\n            \"demo:medication\"\n        ],\n        \"shuffle\": false,\n        \"addProperties\": [\n            {\n                \"variableName\": \"participant_id\",\n                \"isAbout\": \"demo:participant_id\"\n            },\n            {\n                \"variableName\": \"fullName\",\n                \"isAbout\": \"demo:fullName\"\n            },\n            {\n                \"variableName\": \"sex\",\n                \"isAbout\": \"demo:sex\"\n            },\n            {\n                \"variableName\": \"age_years\",\n                \"isAbout\": \"demo:age_years\"\n            },\n            {\n                \"isAbout\": \"demo:email\",\n                \"variableName\": \"email\"\n            },\n            {\n                \"isAbout\": \"demo:participant_education\",\n                \"variableName\": \"participant_education\"\n            },\n            {\n                \"isAbout\": \"demo:nativeLanguage\",\n                \"variableName\": \"nativeLanguage\"\n            },\n            {\n                \"isAbout\": \"demo:healthCondition\",\n                \"variableName\": \"healthCondition\"\n            },\n            {\n                \"isAbout\": \"demo:mentalHealth\",\n                \"variableName\": \"mentalHealth\"\n            },\n            {\n                \"isAbout\": \"demo:share_data\",\n                \"variableName\": \"share_data\"\n            },\n            {\n                \"isAbout\": \"demo:medication\",\n                \"variableName\": \"medication\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tutorials/create-new-activity/","title":"Create a new activity","text":"<p>Now you would like to add a small questionnaire to estimate the handedness of each participant. We can use the Edinburgh handedness inventory for this.</p> <p>This tool is not part of the set of questionnaires included in the repronim library so we are going to have to create it ourselves.</p> <p>There are 2 version for this questionnaire a long and a short version.</p> <ul> <li> <p>Oldfield, R.C. (1971). The assessment and analysis of handedness: The     Edinburgh inventory. Neuropsychologia, 9, 97-113.     doi:10.1016/0028-3932(71)90067-4</p> </li> <li> <p>Veale, J.F. (2014). Edinburgh Handedness Inventory - Short Form: A revised     version based on confirmatory factor analysis. Laterality, 19, 164-177.     doi:10.1080/1357650X.2013.783045</p> </li> </ul> <p>The participant is given one question and a set of activities:</p> <pre><code>Please indicate your preferences in the use of hands in the following activities or objects:\n\n1) Writing (*)\n2) Drawing\n3) Throwing (*)\n4) Using Scissors\n5) Using a Toothbrush (*)\n6) Using a Knife (without a fork)\n7) Using a Spoon (*)\n8) Using a broom (upper hand)\n9) Striking a Match (holds the match)\n10) Opening a Box (holding the lid)\n\ni) Which foot do you prefer to kick with ?\nii) Which eye do you use when using only one?\n</code></pre> <p>The asterisks denote the subset of items that belong to the short form of the questionnaire.</p> <p>The scoring for each item follows the following scheme:</p> <ul> <li>Always right = 100</li> <li>Usually right = 50</li> <li>Both equally = 0</li> <li>Usually left = -50</li> <li>Always left = -100</li> </ul> <p>The Laterality Quotient is given by the mean score over items. And the final classification according to the Laterality Quotient score goes as follow:</p> <ul> <li>Left handers: -100 to -61</li> <li>Mixed handers: -60 to 60</li> <li>Right handers: 61 to 100</li> </ul>"},{"location":"tutorials/create-new-activity/#preparing-the-json-for-the-activity","title":"Preparing the JSON for the activity","text":"<p>Now let's create the <code>activities</code> folder, an activity file for the new assessment tool we want to create. For this tutorial we will be using the short form of the Edinburgh handedness inventory.</p> <pre><code># Type this in a terminal window\nmkdir activities\ntouch activities/EHI/edinburgh_handedness_inventory_short.jsonld\n</code></pre> <p>Now let's start by adding the following content in the activity file we have just created.</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Activity\",\n  \"@id\": \"edinburgh_handedness_inventory_short.jsonld\",\n  \"prefLabel\": \"Edinburgh handedness inventory - short form\",\n  \"description\": \"Short version of the Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\"\n}\n</code></pre> <p>The content is for now very similar to the JSON-LD that defines our protocol. The main difference is for the <code>@type</code> field that mentions that we are now describing an activity as defined in the Reproschema.</p> <p>Two other things we can add right away are:</p> <ul> <li>the references for this questionnaire,</li> <li>the <code>\"preamble\"</code> that is common to all items in this questionnaire.</li> </ul> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Activity\",\n  \"@id\": \"edinburgh_handedness_inventory_short.jsonld\",\n  \"prefLabel\": \"Edinburgh handedness inventory - short form\",\n  \"description\": \"Short version of the Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"citation\": \"10.1080/1357650X.2013.783045\",\n  \"preamble\": \"Please indicate your preferences in the use of hands in the following activities or objects:\"\n}\n</code></pre>"},{"location":"tutorials/create-new-items/","title":"Create new items","text":""},{"location":"tutorials/create-new-items/#creating-items","title":"Creating items","text":"<p>Now that we have a basic structure for this new activity, let us start adding some items.</p> <p>Let's first start with the item for <code>writing</code></p> <pre><code># Type this in a terminal window\nmkdir activities/EHI/items\ntouch activities/EHI/items/writing.jsonld\n</code></pre> <p>The content for items starts like the ones we have seen so far but <code>\"reproschema:Field\"</code> for the <code>@type</code> field.</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Field\",\n  \"@id\": \"writing.jsonld\",\n  \"prefLabel\": \"writing\",\n  \"description\": \"writing item of the EHI\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\"\n}\n</code></pre> <p>We can now add:</p> <ul> <li>the question for this item</li> <li>the <code>inputType</code> for for the user interface that will decide how this item will displayed to the user.</li> <li>the response options</li> </ul> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Field\",\n  \"@id\": \"writing.jsonld\",\n  \"prefLabel\": \"writing\",\n  \"description\": \"writing item of the EHI\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"question\": \"Writing\",\n  \"ui\": {\n    \"inputType\": \"radio\"\n  },\n  \"responseOptions\": {\n    \"valueType\": \"xsd:integer\",\n    \"minValue\": -100,\n    \"maxValue\": 100,\n    \"multipleChoice\": false,\n    \"choices\": [\n      {\n        \"name\": \"Always right\",\n        \"value\": 100\n      },\n      {\n        \"name\": \"Usually right\",\n        \"value\": 50\n      },\n      {\n        \"name\": \"Both equally\",\n        \"value\": 0\n      },\n      {\n        \"name\": \"Usually left\",\n        \"value\": -50\n      },\n      {\n        \"name\": \"Always left\",\n        \"value\": -100\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tutorials/create-new-items/#in-your-own-time-create-a-second-item","title":"In your own time: create a second item","text":"<p>For next step you can create on your own the <code>throwing</code> item of the questionnaire.</p>"},{"location":"tutorials/create-new-items/#add-the-items-to-the-activity","title":"Add the items to the activity","text":"<pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Activity\",\n  \"@id\": \"edinburgh_handedness_inventory_short.jsonld\",\n  \"prefLabel\": \"Edinburgh handedness inventory - short form\",\n  \"description\": \"Short version of the Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"citation\": \"10.1080/1357650X.2013.783045\",\n  \"preamble\": \"Please indicate your preferences in the use of hands in the following activities or objects:\",\n  \"ui\": {\n    \"order\": [\"items/writing.jsonld\", \"items/throwing.jsonld\"],\n    \"shuffle\": false,\n    \"addProperties\": [\n      {\n        \"variableName\": \"writing\",jsonld\n        \"isAbout\": \"items/writing.jsonld\",\n        \"isVis\": true\n      },\n      {\n        \"variableName\": \"throwing\",\n        \"isAbout\": \"items/throwing.jsonld\",\n        \"isVis\": true\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tutorials/create-new-items/#viewing-the-results","title":"Viewing the results","text":""},{"location":"tutorials/create-new-items/#creating-an-item-for-the-results","title":"Creating an item for the results","text":"<pre><code># Type this in a terminal window\ntouch activities/EHI/items/EHI_results.jsonld\n</code></pre> <p>Add the following content to it.</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Field\",\n  \"@id\": \"EHI_results.jsonld\",\n  \"prefLabel\": \"EHI results\",\n  \"description\": \"Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"ui\": {\n    \"inputType\": \"number\",\n    \"readonlyValue\": true\n  },\n  \"responseOptions\": {\n    \"valueType\": \"xsd:integer\",\n    \"minValue\": -100,\n    \"maxValue\": 100\n  }\n}\n</code></pre> <p>Add it to the activity.</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Activity\",\n  \"@id\": \"edinburgh_handedness_inventory_short.jsonld\",\n  \"prefLabel\": \"Edinburgh handedness inventory - short form\",\n  \"description\": \"Short version of the Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"citation\": \"10.1080/1357650X.2013.783045\",\n  \"preamble\": \"Please indicate your preferences in the use of hands in the following activities or objects:\",\n  \"ui\": {\n    \"order\": [\n      \"items/writing.jsonld\",\n      \"items/throwing.jsonld\",\n      \"items/EHI_results.jsonld\"\n    ],\n    \"shuffle\": false,\n    \"addProperties\": [\n      {\n        \"variableName\": \"writing\",\n        \"isAbout\": \"items/writing.jsonld\",\n        \"valueRequired\": true,\n        \"isVis\": true\n      },\n      {\n        \"variableName\": \"throwing\",\n        \"isAbout\": \"items/throwing.jsonld\",\n        \"valueRequired\": true,\n        \"isVis\": true\n      },\n      {\n        \"isAbout\": \"items/EHI_results.jsonld\",\n        \"variableName\": \"EHI_results\",\n        \"isVis\": true\n      }\n    ]\n  },\n  \"compute\": [\n    {\n      \"variableName\": \"EHI_results\",\n      \"jsExpression\": \"( writing + throwing ) / 2\"\n    }\n  ]\n}\n</code></pre>"},{"location":"tutorials/create-new-items/#using-presets-response-options","title":"Using presets response options","text":"<p>If you have to create several items that always have the same set of response options, then it might be easier to create a separate file with those response options and point each item to that file instead. This way, if you need to change the characteristics of one response, you only have to change things in one file rather than in many.</p> <p>For example, you could create response set file to constrains the possible answers on the questions of the Edinburgh Handedness Inventory we have been working on by organizing things this way.</p> <pre><code>activities\n\u251c\u2500\u2500 edinburgh_handedness_inventory_short.jsonld\n\u251c\u2500\u2500 leftRightValueConstraints.jsonld\n\u2514\u2500\u2500 items\n    \u251c\u2500\u2500 writing.jsonld\n    \u251c ...\n    ...\n</code></pre> <p>The content of the <code>leftRightValueConstraints.jsonld</code> file would look like this:</p> <pre><code>{\n    \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n    \"@id\": \"leftRightValueConstraints.jsonld\",\n    \"@type\": \"reproschema:ResponseOption\",\n    \"valueType\": \"xsd:integer\",\n    \"minValue\": -100,\n    \"maxValue\": 100,\n    \"multipleChoice\": false,\n    \"choices\": [\n        {\n            \"name\": \"Always right\",\n            \"value\": 100\n        },\n        {\n            \"name\": \"Usually right\",\n            \"value\": 50\n        },\n        {\n            \"name\": \"Both equally\",\n            \"value\": 0\n        },\n        {\n            \"name\": \"Usually left\",\n            \"value\": -50\n        },\n        {\n            \"name\": \"Always left\",\n            \"value\": -100\n        }\n    ]\n}\n</code></pre> <p>And you can point each item to it by referring to the local file in the <code>responseOptions</code> field.</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Field\",\n  \"@id\": \"writing\",\n  \"prefLabel\": \"writing\",\n  \"description\": \"writing item of the EHI\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"question\": \"Writing\",\n  \"ui\": { \"inputType\": \"radio\" },\n  \"responseOptions\": \"../leftRightValueConstraints.jsonld\"\n}\n</code></pre>"},{"location":"tutorials/create-new-protocol/","title":"Creating a new protocol","text":""},{"location":"tutorials/create-new-protocol/#creating-a-protocol-from-scratch","title":"Creating a protocol from scratch","text":""},{"location":"tutorials/create-new-protocol/#setting-the-stage","title":"Setting the stage","text":"<p>We first need to create some folders to host the schema that will represent all our questionnaires.</p> <pre><code># Type this in a terminal window\n\n# FYI: this line starts with #\n#  it is comment and it will not be executed\n#  if you copy paste it in the command line\n\n# Creating the directory for the depression neuroimaging study\nmkdir depression_nimg_schema\n\n# Move into the directory\ncd depression_nimg_schema\n</code></pre> <p>Now let's create the <code>protocols</code> folder, a protocol file named after our study.</p> <pre><code># Type this in a terminal window\nmkdir protocols\ntouch protocols/depression_nimg_schema.jsonld\n</code></pre> <p>Ok so now we are ready to start putting some content into those files.</p> <p>Open the <code>depression_nimg_schema.jsonld</code> with a text editor and add the following content into it.</p> <pre><code>{\n  \"@context\": [\"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\"],\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"depression_nimg_schema.jsonld\",\n  \"prefLabel\": \"depression neuroimaging study\",\n  \"description\": \"a study on linguistic processing in depression\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\"\n}\n</code></pre> <p>To explain a bit what all of this means:</p> <ul> <li><code>@context</code> gives the URL where we can find the \"definitions\" of terms used in the reproschema. It is itself a JSON file that you can view directly.</li> <li><code>@type</code> just says what type of entity this JSON-LD file describes. In this case it is a <code>protocol</code> entity as defined by the reproschema.</li> <li><code>@id</code> is the identity of this entity, its unique identifier.</li> </ul> <p>You can then use the preferred label field and the description to give more human readable ways to describe this entity.</p> <p>You must also specify the version of the schema you are using.</p>"},{"location":"tutorials/create-new-protocol/#landing-page","title":"Landing page","text":"<p>Let's now take care of adding a landing page to the list of assessments our participants will have to fill in.</p> <p>Let's create a markdown readme file in the <code>protocols</code> folder.</p> <pre><code># Type this in a terminal window\ntouch protocols/README.md\n</code></pre> <p>Add some content in markdown to it just to get things started, like for example</p> <pre><code># README\n\nHello world\n</code></pre> <p>Now we want to add this file to our protocol and make it the landing page for the english version of this study. So the content of your protocol file should now read like this.</p> <pre><code>{\n  \"@context\": [\"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\"],\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"depression_nimg_schema.jsonld\",\n  \"prefLabel\": \"depression neuroimaging study\",\n  \"description\": \"a study on linguistic processing in depression\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"landingPage\": {\n    \"@id\": \"README.md\",\n    \"inLanguage\": \"en\"\n  }\n}\n</code></pre> <p>A note about relative paths</p> <p>Reproschema allows for the use of relative paths which means that in the example above the landing page <code>@id</code> being \"README.md\" means that the <code>README.md</code> and <code>depression_nimg_schema</code> are in the same folder. If the <code>README.md</code> had been in the parent directory, the <code>@id</code> of the <code>landingPage</code> section would have read <code>\"@id\": \"../README.md\"</code>.</p>"},{"location":"tutorials/create-new-protocol/#add-a-first-assessment","title":"Add a first assessment","text":"<p>OK now we want to add a questionnaire to assess the severity of the depression of our participants.</p> <p>The first thing to do is to browse through the library of assessments that already exist on the dedicated repronim repository.</p> <p>It seems that we can use the PHQ-9 that self describes as a \"Brief Depression Severity Measure\".</p> <p>The schema that describe the PHQ-9 activity can be found here.</p> <p>If you want to visualize this activity on its own, you can use the reproschema-ui. To do that you can point the UI to the raw content of this activity.</p> <p>To get access to the raw content of that activity you must click on the <code>Raw</code> button on github once you have opened its page. This will open this URL: https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/PHQ-9/PHQ9_schema.</p> <p>You can then pass the the URL of raw content to the UI using the following template:</p> <pre><code>https://www.repronim.org/reproschema-ui/#/activities/0?url=url-to-activity-schema\n</code></pre> <p>So in the case of the PHQ-9, it would give this URL that we copy-paste in a browser to view the activity on its own.</p> <pre><code>https://www.repronim.org/reproschema-ui/#/activities/0?url=https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/PHQ-9/PHQ9_schema\n</code></pre> <p>You should now be able to see something like this and browse directly through the content of the activity.</p> <p></p> <p>OK now that we know what we need to add to our protocol, let's add it our schema.</p> <p>To do this, the content of your <code>depression_nimg_schema.jsonld</code> should now look like this.</p> <pre><code>{\n  \"@context\": [\n    \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n    {\n      \"rl\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/\"\n    }\n  ],\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"depression_nimg_schema.jsonld\",\n  \"prefLabel\": \"depression neuroimaging study\",\n  \"description\": \"a study on linguistic processing in depression\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"landingPage\": {\n    \"@id\": \"README.md\",\n    \"inLanguage\": \"en\"\n  },\n  \"ui\": {\n    \"addProperties\": [\n      {\n        \"isAbout\": \"rl:PHQ-9/PHQ9_schema\",\n        \"variableName\": \"PHQ9_schema\",\n        \"prefLabel\": { \"en\": \"Depression\" }\n      }\n    ],\n    \"order\": [\"rl:PHQ-9/PHQ9_schema\"]\n  }\n}\n</code></pre>"},{"location":"tutorials/create-new-protocol/#what-did-we-add","title":"What did we add ?","text":"<p>Let's just highlight the things that have changed.</p> <p>We have added a <code>ui</code> and an <code>order</code> fields.</p> <p><code>ui</code> is for things related to the user interface and contains <code>addProperties</code> where we will be listing all the assessments that we add to our protocol.</p> <p>Each assessment is represented by an activity that is given a <code>variableName</code> and a <code>prefLabel</code>. The latter will be used as the name to display on the UI in english.</p> <p>The field <code>isAbout</code> is the URL to point to the schema of that activity.</p> <p>The field <code>order</code> is there to indicate which activity should be presented first, second...</p> <p>Making sure you have a valid JSON file</p> <p>Json files can get a bit long and you might sometimes forget a coma of a closing square brackets, so to make sure that your JSON file is correctly formatted you can use a linter. For example, you can test individual files on the json linter website.</p> <p>JSON-LD expansion</p> <p>You might notice that <code>rl:PHQ-9/PHQ9_schema</code> does not look like a typical URL and clearly does not match the one we fed the UI earlier (<code>https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/PHQ-9/PHQ9_schema</code>). Well this is because we have defined, in the <code>@context</code> part of our JSON-LD, that the <code>rl</code> from <code>rl:PHQ-9/PHQ9_schema</code> will actually stand for <code>https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/</code>. This shorthand makes it faster for us to write URL but the UI will know how to <code>expand</code> this into an actual URL.</p> <p>Similarly the <code>reproschema:Protocol</code> in <code>\"@type\": \"reproschema:Protocol\"</code> expands in <code>http://schema.repronim.org/Protocol</code> because <code>reproschema</code> has been indirectly defined in the context of <code>depression_nimg_schema.jsonld</code>. To be more precise <code>reproschema</code> is defined in the base file which is part of the context of the generic file that our protocol points to.</p>"},{"location":"tutorials/create-new-protocol/#starting-to-put-things-online-to-see-how-they-look","title":"Starting to put things online to see how they look","text":"<p>So now we want to put things online and see how things look.</p> <p>To do that we will use Git and Github.</p> <p>Let's first initialize a repository in the folder where we have have been working.</p> <pre><code># Type this in a terminal window\ngit init . # the dot signifies the directory where you currently are\n</code></pre> <p>Now we tell git to make a snapshot of the current state of your folder.</p> <pre><code># Type this in a terminal window\ngit add --all # tell git to include all the new changes into the next snapshot\n\ngit commit -m 'add protocol and README' # make a first snapshot of your protocol\n</code></pre> <p>Now to move things to a github repository, you need to go and create an empty repository to host the folder and files you have created.</p> <p>The repository should have an URL that resembles this one where <code>&lt;YOUR_USERNAME&gt;</code> is your actual Github username:</p> <pre><code>https://github.com/&lt;YOUR_USERNAME&gt;/depression_nimg_schema.git\n</code></pre> <p>You \"push\" the content of the <code>depression_nimg_schema</code> onto the empty \"remote\" repository you have just created.</p> <pre><code># Type this in a terminal window\n\n# tell git about the existence of this new online repository you have just created\ngit remote add origin https://github.com/&lt;YOUR_USERNAME&gt;/depression_nimg_schema.git\n\n# Transfer the content there\ngit push -u origin master\n</code></pre> <p>If everything worked normally, you should be able to use the reproschema-ui to visualize your protocol using the following template:</p> <pre><code>https://www.repronim.org/reproschema-ui/#/?url=url-to-protocol-schema\n</code></pre> <p>So once again grab the URL of the raw content of your protocol and point the UI to it:</p> <pre><code>https://www.repronim.org/reproschema-ui/#/?url=https://raw.githubusercontent.com/&lt;YOUR_USERNAME&gt;/depression_nimg_schema/master/protocol/depression_nimg_schema.jsonld\n</code></pre>"},{"location":"tutorials/create-new-protocol/#in-you-own-time-add-the-thank-you-activity","title":"In you own time: add the <code>thank-you</code> activity","text":"<p>For practice you can now add another activity to your protocol: one to thank people for their participation.</p> <p>You can find it here in the reproschema library.</p> <p>Once you have changed the <code>depression_nimg_schema.jsonld</code>, you can update the online content with the following git commands.</p> <pre><code># Type this in a terminal window\ngit add --all\ngit commit -m 'add a thank you activity'\ngit push\n</code></pre>"},{"location":"tutorials/finalizing-the-protocol/","title":"Finalize the protocol","text":""},{"location":"tutorials/finalizing-the-protocol/#viewing-the-activity","title":"Viewing the activity","text":"<p>Push the content you have created on your repository on github</p> <pre><code># Type this in a terminal window\ngit add --all\ngit commit -m 'adding the EHI activity'\ngit push\n</code></pre> <p>Use the UI to visualize just the activity.</p> <pre><code>https://www.repronim.org/reproschema-ui/#/activities/0?url=url-to-activity-schema\n</code></pre> <pre><code>https://www.repronim.org/reproschema-ui/#/activities/0?url=https://raw.githubusercontent.com/&lt;YOUR_USERNAME&gt;/depression_nimg_schema/activities/edinburgh_handedness_inventory_short.jsonld\n</code></pre>"},{"location":"tutorials/finalizing-the-protocol/#adding-the-activity-to-the-protocol","title":"Adding the activity to the protocol","text":"<pre><code>{\n    \"@context\": [\n      \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n      {\n        \"rl\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/master/activities/\"\n      }\n    ],\n    \"@type\": \"reproschema:Protocol\",\n    \"@id\": \"depression_nimg_schema.jsonld\",\n    \"prefLabel\": \"depression neuroimaging study\",\n    \"description\": \"a study on linguistic processing in depression\",\n    \"schemaVersion\": \"1.0.0-rc1\",\n    \"version\": \"0.0.1\",\n    \"landingPage\": {\n      \"@id\": \"README.md\",\n      \"inLanguage\": \"en\"\n    },\n    \"ui\": {\n      \"addProperties\": [\n        {\n          \"isAbout\": \"rl:PHQ-9/PHQ9_schema\",\n          \"variableName\": \"PHQ9_schema\",\n          \"prefLabel\": { \"en\": \"Depression\" }\n        },\n          {\n          \"isAbout\": \"../activities/EHI/edinburgh_handedness_inventory_short.jsonld\",\n          \"variableName\": \"EHI_short_schema\",\n          \"prefLabel\": { \"en\": \"EHI\" }\n        }\n      ],\n      \"order\": [\n          \"rl:PHQ-9/PHQ9_schema\",\n          \"EHI_short_schema\"\n          ]\n    }\n}\n</code></pre>"},{"location":"tutorials/tips-to-make-your-life-easier/","title":"Tips to make your life easier","text":""},{"location":"tutorials/tips-to-make-your-life-easier/#validating-your-json-files","title":"Validating your JSON files","text":"<p>First, make sure your syntax is in correct JSON-LD format. Test all files with <code>@context</code> from command line:</p> <pre><code>npm install -g jsonlint\ngrep -r \"@context\" . | cut -d: -f1 | xargs -I fname jsonlint -q fname\n</code></pre> <p>Or test individual files on the json linter website.</p>"},{"location":"tutorials/tips-to-make-your-life-easier/#validating-your-schema","title":"Validating your schema","text":"<pre><code>pip install reproschema requests_cache\nreproschema -l DEBUG validate activities\n</code></pre>"},{"location":"tutorials/tips-to-make-your-life-easier/#automating-those-checks","title":"Automating those checks","text":"<p>It can be quickly become cumbersome to type some of the commands described above to always make sure the files you have created are valid.</p> <p>Thankfully though there are ways to automate those checks and integrate them into your workflow. They rely on using some of the features of Github or Git.</p>"},{"location":"tutorials/tips-to-make-your-life-easier/#github-actions","title":"Github actions","text":"<p>The first one is using Github actions to let Github perform those checks for you every time there some new content is added on a repository.</p> <p>To set those up you simply need to create a <code>.github/workflows</code> folder inside the repository where you are working. This will contain all the workflows (a set of \"actions\") that Github has to run on this repository. Each workflow is described by a <code>yml</code> file.</p> <p>For example you could create a <code>validate.yml</code> file in this repository.</p> <pre><code>\u251c\u2500\u2500 .git # hidden git folder\n\u251c\u2500\u2500 .github # hidden github folder\n\u2502    \u2514\u2500\u2500 workflows\n\u2502        \u2514\u2500\u2500 validate.yml # file the actions used to validate your schema\n\u251c\u2500\u2500 protocols\n\u2502    \u251c\u2500\u2500 README-en.md\n\u2502    \u2514\u2500\u2500 protocol-1.jsonld\n\u251c\u2500\u2500 activities\n\u2502    \u251c\u2500\u2500 items\n\u2502    \u2502   \u2514\u2500\u2500 item-1.jsonld\n\u2502    \u2514\u2500\u2500 activity-1.jsonld\n\u2514\u2500\u2500 README.md\n</code></pre> <p>The content of <code>validate.yml</code> file would look like this.</p> <pre><code>\n</code></pre>"},{"location":"tutorials/translating-an-activity/","title":"Translating a questionnaire","text":"<p>Imagine that a colleague of yours has heard that you have created this online tool based on the Edinburgh handedness inventory and she wants to use it for her own work. But she would need a French version of the questionnaire.</p> <p>Well there is an easy way to reuse the work we have already done to have the tool support several languages.</p> <p>First here is the list of the questions of the EHI in French.</p> <pre><code>Quelle main utilisez vous de pr\u00e9f\u00e9rence pour:\n\n1) \u00c9crire (*)\n2) Dessiner\n3) Lancer (*)\n4) Utiliser une paire de ciseaux\n5) Utiliser une brosse \u00e0 dents (*)\n6) Tenir un couteau (sans fourchette)\n7) Tenir une cuill\u00e8re (*)\n8) Utiliser un balai (main sup\u00e9rieure)\n9) Tenir une allumette pour l'allumer\n10) Ouvrir une bo\u00eete (prendre le couvercle)\n\ni) Quel est le pied avec lequel vous pr\u00e9f\u00e9rez shooter?\nii) Quel oeil utiliser-vous pour viser?\n</code></pre>"},{"location":"tutorials/translating-an-activity/#updating-the-items","title":"Updating the items","text":"<pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Field\",\n  \"@id\": \"writing\",\n  \"prefLabel\": {\n    \"en\": \"writing\",\n    \"fr\": \"\u00e9crire\"\n  },\n  \"description\": \"writing item of the EHI\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"question\": {\n    \"en\": \"Writing\",\n    \"fr\": \"\u00c9crire\"\n  },\n  \"ui\": { \"inputType\": \"radio\" },\n  \"responseOptions\": \"../leftRightValueConstraintsMultiLang.jsonld\"\n}\n</code></pre>"},{"location":"tutorials/translating-an-activity/#updating-the-response-options","title":"Updating the response options","text":"<pre><code>{\n    \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n    \"@id\": \"leftRightValueConstraintsMultiLang.jsonld\",\n    \"@type\": \"reproschema:ResponseOption\",\n    \"valueType\": \"xsd:integer\",\n    \"minValue\": -100,\n    \"maxValue\": 100,\n    \"multipleChoice\": false,\n    \"choices\": [\n        {\n            \"name\": {\n            \"en\": \"Always right\",\n            \"fr\": \"Toujours la main droite\"\n        },\n            \"value\": 100\n        },\n        {\n            \"name\": {\n            \"en\": \"Usually right\",\n            \"fr\": \"En g\u00e9n\u00e9ral la main droite\"\n        },\n            \"value\": 50\n        },\n        {\n            \"name\": {\n            \"en\": \"Both equally\",\n            \"fr\": \"Les deux\"\n        },\n            \"value\": 0\n        },\n        {\n            \"name\": {\n            \"en\": \"Usually left\",\n            \"fr\": \"En g\u00e9n\u00e9ral la main gauche\"\n        },\n            \"value\": -50\n        },\n        {\n            \"name\": {\n            \"en\": \"Always left\",\n            \"fr\": \"Toujours la main gauche\"\n        },\n            \"value\": -100\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorials/translating-an-activity/#updating-the-activity","title":"Updating the activity","text":"<p>We need to update the <code>edinburgh_handedness_inventory_short.jsonld</code> so that the preamble question has both languages:</p> <pre><code>{\n  \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc1/contexts/generic\",\n  \"@type\": \"reproschema:Activity\",\n  \"@id\": \"edinburgh_handedness_inventory_short_multi_lang.jsonld\",\n  \"prefLabel\": {\n    \"en\": \"Edinburgh handedness inventory - short form\",\n    \"fr\": \"Version abr\u00e9g\u00e9e du test Edinburgh\"\n  },\n  \"description\": \"Short version of the Edinburgh handedness inventory\",\n  \"schemaVersion\": \"1.0.0-rc1\",\n  \"version\": \"0.0.1\",\n  \"citation\": \"10.1080/1357650X.2013.783045\",\n  \"preamble\": {\n    \"en\": \"Please indicate your preferences in the use of hands in the following activities or objects:\",\n    \"fr\": \"Quelle main utilisez-vous de pr\u00e9f\u00e9rence pour :\"\n  },\n  \"ui\": {\n    \"order\": [\n      \"items/writing.jsonld\",\n      \"items/throwing.jsonld\",\n      \"items/EHI_results.jsonld\"\n    ],\n    \"shuffle\": false,\n    \"addProperties\": [\n      {\n        \"variableName\": \"writing\",\n        \"isAbout\": \"items/writing.jsonld\",\n        \"valueRequired\": true,\n        \"isVis\": true\n      },\n      {\n        \"variableName\": \"throwing\",\n        \"isAbout\": \"items/throwing.jsonld\",\n        \"valueRequired\": true,\n        \"isVis\": true\n      },\n      {\n        \"isAbout\": \"items/EHI_results.jsonld\",\n        \"variableName\": \"EHI_results\",\n        \"isVis\": true\n      }\n    ]\n  },\n  \"compute\": [\n    {\n      \"variableName\": \"EHI_results\",\n      \"jsExpression\": \"( writing + throwing ) / 2\"\n    }\n  ]\n}\n</code></pre>"},{"location":"tutorials/using-reproschema/","title":"How can I use reproschema to create my own questionnaire?","text":"<p>Broadly speaking, there are two ways to create new assessments (<code>actitivies</code>) or combinations of assessments (<code>protocols</code>). If you only have very few items to put in new activity or you simply want to create a protocol that reuses activities that already exist, you can do that manually by editing the files directly. But if you have to create complex activities or protocols, we suggest that for your own sanity and to avoid wasting time in the long run, you look into scripting the creation of your new tools.</p>"},{"location":"tutorials/using-reproschema/#manual-schema-generation","title":"Manual schema generation","text":"<p>Here we will show a step by step approach to create a new protocol that includes activities that already exist and how to create a brand new activity.</p>"},{"location":"tutorials/using-reproschema/#requirements","title":"Requirements","text":"<p>For this tutorial you will be using some other tools to put your work online. Here is what you will need to install or set up.</p> <ul> <li>Git</li> <li>a Github account</li> <li>a \"decent\" text editor like visual studio code and we do recommend that you look for extensions or packages that help you deal with JSON files.</li> </ul> <p>We don't assume that you have in-depth knowledge of Git and Github for this tutorial so we will try to provide with the commands you need to type when it is required. Similarly, we will provide some of the commands to create directories and files though you could do many of those actions \"by hand\" with a couple of mouse clicks.</p> <p>For Windows users</p> <p>Most of the commands we will provide should work in the command line interface that will come on your computer when you install Git. But you could also look into using one the linux sub-system that provide you with Unix command line and that can be easily installed from the app-store on your computer.</p>"},{"location":"tutorials/using-reproschema/#context","title":"Context","text":"<p>To make this a bit less abstract, we will imagine we want to create a new protocol for a new neuroimaging study we are starting to investigate some aspects of linguistic processing is affected in patients with depression.</p> <p>So we would want to have a set of questionnaires:</p> <ul> <li>to assess the severity of the depression of our participants,</li> <li>check which participants can go in an MRI scanner,</li> <li>estimate the handedness of the participants (because of the language lateralization organization of the brain).</li> </ul>"},{"location":"tutorials/using-reproschema/#a-note-about-this-tutorial","title":"A note about this tutorial","text":"<p>We will be creating several JSON-LD files in this tutorial. Those can quickly grow big and it can be hard to see what was added to a certain file from one step to the next. This gets even more confusing when you know that the order of the lines does not really matter. So to makes things easier to follow (and unless we explicitly say so) any new content we add to a file we have already worked on will be put at the end of this file.</p> <p>So if step 1 looked like this:</p> <pre><code>{\n  \"@context\": \"some_URL\",\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"some_id\",\n  \"schemaVersion\": \"1.0.0\",\n  \"version\": \"0.0.1\",\n}\n</code></pre> <p>We will make sure that step 2 where we add a <code>landingPage</code> field looks like this:</p> <pre><code>{\n  \"@context\": \"some_URL\",\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"some_id\",\n  \"schemaVersion\": \"1.0.0\",\n  \"version\": \"0.0.1\",\n  \"landingPage\": {\"@id\": \"README.md\"}\n}\n</code></pre> <p>Although some other possibility would be equivalent:</p> <pre><code>{\n  \"landingPage\": {\"@id\": \"README.md\"},\n  \"@context\": \"some_URL\",\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"some_id\",\n  \"schemaVersion\": \"1.0.0\",\n  \"version\": \"0.0.1\",\n}\n</code></pre> <pre><code>{\n  \"@context\": \"some_URL\",\n  \"@type\": \"reproschema:Protocol\",\n  \"@id\": \"some_id\",\n  \"landingPage\": {\"@id\": \"README.md\"},\n  \"schemaVersion\": \"1.0.0\",\n  \"version\": \"0.0.1\",\n}\n</code></pre>"},{"location":"user-guide/adopt-assessments/","title":"Adopting Assessments from the reproschema-library","text":"<p>This part focuses on how to select and integrate assessments from the reproschema-library into your research protocol, an essential step in crafting a comprehensive study. The chosen assessments are to be placed in the <code>activities</code> folder within your repository. This folder serves as the central hub for various assessments or activities that collectively form your research protocol.</p> <p>Each activity or assessment within this <code>activities</code> folder is typically structured around a file named with a suffix <code>_schema</code>. This file defines the overall framework of the assessment. Accompanying this, if an assessment comprises specific questions, these are organized in a subfolder titled <code>items</code> within the respective activity's directory. It's important to note that if an assessment is directly taken from the ReproSchema-library without any customization, the creation of an <code>items</code> subfolder is not necessary, as the itemized questions are predefined in the library.</p> <p>To illustrate this process, we will use two specific types of assessments from reproschema-library: <code>demographics</code> and <code>psychological questions</code>. The latter represents a composite assessment created from multiple pre-existing assessments within the library. This example demonstrates how to combine different elements from the library to construct a bespoke assessment tailored to the unique demands of your research protocol.</p>"},{"location":"user-guide/adopt-assessments/#step-1-understand-the-structure-of-a-_schema-file-through-this-exemplar-file","title":"Step 1: Understand the structure of a *_schema file through this exemplar file","text":"<ol> <li> <p>Context (@context): This field provides references to the context definitions. In this schema, it links to the generic context of ReproSchema and the specific context for the items in the repository, defined by the URL with the \"rl\" key. This context helps to interpret the terms used within the schema.</p> </li> <li> <p>Type (@type): Defined as \"reproschema:Activity,\" this indicates the nature of the document, specifying that it is an activity within the ReproSchema framework.</p> </li> <li> <p>Identifier (@id): The unique identifier for this specific schema is \"activity1_schema.\" This ID uniquely distinguishes this activity from others in the repository.</p> </li> <li> <p>PrefLabel: This is the human-readable name of the activity, here given as \"Screening.\" It serves as a clear and concise title for the activity.</p> </li> <li> <p>Description: Provides a brief overview of the activity, in this case, \"example of an activity.\"</p> </li> <li> <p>SchemaVersion and Version: These fields indicate the versions of the ReproSchema being used (\"1.0.0-rc2\" means \u201c1.0.0 Release Candidate 2\u201d) and the version of this particular activity schema (\"0.0.1\"), respectively.</p> </li> <li> <p>UI Configuration: This section specifies how the activity will be presented to users. It includes:</p> <ul> <li>addProperties: Lists the variables and corresponding items collected in the activity. For example, the variable <code>document_upload_item</code> is about the item <code>items/document_upload_item</code> and is always visible (<code>isVis: true</code>). It allows for the item to be skipped (<code>reproschema:Skipped</code>).</li> <li>order: Dictates the sequence in which items will appear in the UI. Here, it specifies that \"items/document_upload_item\" will be the first (and only) item.</li> <li>shuffle: Indicates whether the order of items should be randomized. In this example, it is set to <code>false</code>, meaning the order is fixed.</li> <li>allow: Defines additional UI functionalities. Here, it includes <code>reproschema:AutoAdvance</code> for automatic progression and <code>reproschema:AllowExport</code> to enable data export.</li> </ul> </li> </ol>"},{"location":"user-guide/adopt-assessments/#step-2-customizing-the-schema-file-for-demographics-using-existing-assessments-from-reproschema-library","title":"Step 2: Customizing the schema file for demographics using existing assessments from reproschema-library","text":"<p>This step involves precise modifications, particularly in the <code>@context</code> and <code>addProperties</code> sections, to ensure the schema accurately reflects the demographic data you aim to collect.</p> <ol> <li> <p>Adjusting the <code>@context</code> for Demographics:</p> <p>In addition to the standard ReproSchema context, we've added a specific link in the \"@context\" section for demographics:</p> <pre><code>\"demo\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/[commitID]/demographics_and_background_information_v1/items/\"\n</code></pre> <p>Labeling this link as \"demo\" directs the schema to the location in the ReproSchema-library where items for demographics and background information are defined. We use the link with a specific commit ID to ensure the consistency of the assessment version. This contextual link allows the schema to access the detailed structures and definitions needed for each demographic item.</p> </li> <li> <p>Customizing \"addProperties\" for Demographic Variables:</p> <p>In the \"addProperties\" section, we define each variable that corresponds to a demographic question. For example:</p> <pre><code>{\n\"variableName\": \"year_of_birth\",\n\"isAbout\": \"demo:year_of_birth\"\n}\n</code></pre> <p>The <code>\"variableName\": \"year_of_birth\"</code> is where you specify the variable as the participant's year of birth. The <code>\"isAbout\": \"demo:year_of_birth\"</code> part establishes a link to the detailed structure of this item in the ReproSchema-library. The \"demo:\" prefix references the additional context you've added, guiding the schema to the correct location for the structure and details of the \"year_of_birth\" item.</p> </li> </ol> <p>See the outcome file here</p>"},{"location":"user-guide/adopt-assessments/#step-3-integrating-multiple-assessments","title":"Step 3: Integrating multiple assessments","text":"<p>Different from <code>demograpgics</code>, <code>psychological_questionnaire_schema</code> combines assessments, such as PHQ-9, GAD7, PC-PTSD-5, and demographics from reproschema-library.</p> <ol> <li> <p>Contextual setup (@context):</p> <p>The @context section is expanded to include not only the generic ReproSchema context but also specific links to the ReproSchema-library. This enables the schema to access a broader range of predefined items and assessments. For the psychological questionnaire, two context links are established:</p> <pre><code>\"@context\": [\n\"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc4/contexts/generic\",\n        {\n            \"activities\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/[commitID]/activities/\",\n            \"demo\": \"https://raw.githubusercontent.com/ReproNim/reproschema-library/[commitID]/activities/demographics_and_background_information_v1/items/\"\n        }\n    ]\n</code></pre> <p>A link to the activities in the reproschema-library (<code>activities</code>: ) and a link for demographics items (<code>demo</code>: ), both are commit-specific. This indicates that we will combine different assessments from those two parts.</p> </li> <li> <p>Defining the activity (@type, @id, prefLabel, etc.):</p> <p>The standard fields like @type, @id, prefLabel, description, preamble, schemaVersion, and version define the nature and purpose of the psychological questionnaire.</p> </li> <li> <p>UI configuration and integration of multiple assessments (ui):</p> <pre><code>\"ui\": {\n    \"addProperties\": [\n        {\n            \"variableName\": \"phq-9\",\n            \"isAbout\": \"activities:PHQ-9/PHQ9_schema\"\n        },\n        {\n            \"variableName\": \"gad-7\",\n            \"isAbout\": \"activities:GAD7/GAD7_schema\"\n        },\n        {\n            \"variableName\": \"pc-ptsd-5\",\n            \"isAbout\": \"activities:PC-PTSD-5/PC-PTSD-5_schema\"\n        },\n        {\n            \"variableName\": \"clinical_history_psychiatry\",\n            \"isAbout\": \"demo:clinical_history_psychiatry\"\n        },\n        {\n            \"variableName\": \"clinical_history_psychiatry_other\",\n            \"isAbout\": \"demo:clinical_history_psychiatry_other\"\n        },\n        {\n            \"variableName\": \"clinical_history_psychiatry_current\",\n            \"isAbout\": \"demo:clinical_history_psychiatry_current\"\n        },\n        {\n            \"variableName\": \"clinical_history_psychiatry_current_only_some\",\n            \"isAbout\": \"demo:clinical_history_psychiatry_current_only_some\"\n        },\n        {\n            \"variableName\": \"clinical_history_psychiatry_current_only_some_other\",\n            \"isAbout\": \"demo:clinical_history_psychiatry_current_only_some_other\"\n        }\n        ],\n    \"order\": [\n        \"activities:PHQ-9/PHQ9_schema\",\n        \"activities:GAD7/GAD7_schema\",\n        \"activities:PC-PTSD-5/PC-PTSD-5_schema\",\n        \"demo:clinical_history_psychiatry\",\n        \"demo:clinical_history_psychiatry_other\",\n        \"demo:clinical_history_psychiatry_current\",\n        \"demo:clinical_history_psychiatry_current_only_some\",\n        \"demo:clinical_history_psychiatry_current_only_some_other\"\n        ],\n    \"shuffle\": false,\n    \"allow\": [\n        \"reproschema:AutoAdvance\",\n        \"reproschema:AllowExport\"\n        ]\n}\n</code></pre> <p>In the addProperties section, we define each variable that corresponds to a specific assessment.</p> <p>For instance:</p> <ul> <li> <p><code>\"variableName\": \"phq-9\"</code> is linked to <code>\"isAbout\": \"activities:PHQ-9/PHQ9_schema\"</code>.     This implies that the PHQ-9 schema (an assessment for depressive symptoms) from the reproschema-library is used in the current psychological questionnaire schema.</p> </li> <li> <p>Similarly, other assessments like <code>GAD-7</code> and <code>PC-PTSD-5</code> are included     using their respective variable names and links to their schemas in the activities context.</p> </li> <li> <p>Additional variables related to clinical history in psychiatry are linked using the demo context,     pointing to specific items within the demographics and background information section of the reproschema-library.</p> <pre><code>{\n    \"variableName\": \"clinical_history_psychiatry\",\n    \"isAbout\": \"demo:clinical_history_psychiatry\"\n}\n</code></pre> </li> <li> <p>The <code>order</code> array specifies the sequence in which these assessments will appear in the questionnaire,     ensuring a logical flow for participants.</p> </li> <li> <p>The <code>shuffle</code> setting is <code>false</code>, maintaining the defined order,     and allow includes functionalities like auto-advance between assessments and data export.</p> </li> </ul> </li> </ol> <p>See the outcome here</p>"},{"location":"user-guide/create-new-assess/","title":"Creating New Assessments for Unique Research Needs","text":"<p>This section provides the customized new assessments tailored to specific research needs. Our focus is on creating three distinct types of activities that are not readily available in the reproschema-library. These include:</p> <ol> <li>clinical questions to gather clinical background information,</li> <li>a speech task designed to collect audio data, and</li> <li>an audio check to facilitate the speech task.</li> </ol> <p>For each of these new assessments, the folder structure within the repository will differ slightly from those directly adopted from the reproschema-library. Specifically, each activity has its own dedicated folder within the <code>activities</code> directory. For instance, the speech task resides in <code>activities/4_speech</code>. Within this folder, besides the primary schema file (e.g., <code>speech_schema</code>), there is an additional subfolder named <code>items</code>. This <code>items</code> folder contains individual questions or tasks pertaining to that specific activity.</p> <p>In the case of the speech task, the <code>items</code> folder might include a single task designed to prompt the participant to provide a speech sample. Similarly, for the clinical questions, their respective folders will contain <code>items</code> subfolders with corresponding questions tailored to elicit the required information.</p> <p>The structure of an item within the <code>items</code> folder of a ReproSchema activity is similar to the schema template, but with key differences that cater to the specifics of individual data collection elements. Here's an explanation of the provided template for a <code>country item</code>:</p> <ol> <li> <p>Context and type (@context, @type):     The <code>@context</code> remains the same, pointing to the generic context of ReproSchema.     The <code>@type</code> is now \"reproschema:Field\" instead of \"reproschema:Activity\".     This change signifies that this template defines a single data collection field or question within an activity, as opposed to the overall structure of an activity.</p> </li> <li> <p>Identifier and descriptive fields (@id, prefLabel, description, etc.):     <code>@id</code> serves as a unique identifier for the item, here named \"country_item\".     prefLabel and description provide a human-readable name and a brief description of the item, similar to their use in the schema template.</p> </li> <li> <p>Question field (question):     This field contains the actual question or prompt that will be presented to the participant.     In this template, it reads: \"This is an item where the user can select a country.\"</p> </li> <li> <p>UI configuration (ui):     The ui section in the item template differs from the schema template.     It specifies how the question will be presented to the user.     The inputType is set to \"selectCountry\", indicating that the user interface will provide a country selection method.</p> </li> <li> <p>Response options (responseOptions):     This section defines the nature and structure of the responses allowed for the item.     In this example, it specifies the valueType as \"xsd:string\" and a maxLength of 50 characters.     It also provides a URL to a list of choices, in this case, a JSON file containing country names.     This link allows the questionnaire to dynamically fetch and display a list of countries as response options.</p> <pre><code>\"responseOptions\": {\n    \"valueType\": \"xsd:string\",\n    \"maxLength\": 50,\n    \"choices\": \"https://raw.githubusercontent.com/samayo/country-json/master/src/country-by-name.json\"\n}\n</code></pre> </li> </ol>"},{"location":"user-guide/create-new-assess/#step-1-specifying-inputtype-and-responseoption-to-gather-precise-data","title":"Step 1: Specifying <code>inputType</code> and <code>responseOption</code> to gather precise data","text":"<p>We have crafted ten items in the 'items' folder for the clinical questions assessment. Each item, such as <code>alcohol_consumption</code>, <code>height</code>, <code>weight</code>, etc., has its <code>ui</code> inputType and <code>responseOptions</code> specifically defined to suit the nature of the question.</p> <p>Take 'alcohol_consumption' as an example. The UI configuration and response options for this question are tailored to capture a straightforward piece of information:</p> <pre><code>\"question\": {\n    \"en\": \"Have you drunk alcohol today?\",\n    \"es\": \"\u00bfHas bebido alcohol hoy?\"\n    },\n\"ui\": {\n    \"inputType\": \"radio\"\n    },\n\"responseOptions\": {\n    \"valueType\": \"xsd:string\",\n    \"multipleChoice\": false,\n    \"choices\": [\n        {\n            \"name\": {\n                \"en\": \"Yes\",\n                \"es\": \"S\u00ed\"\n                },\n            \"value\": 1\n         },\n         {\n            \"name\": {\n                \"en\": \"No\",\n                 \"es\": \"No\"\n                 },\n            \"value\": 2\n        }\n    ]\n}\n</code></pre> <ul> <li> <p>The ui section sets the <code>inputType</code> to <code>\"radio\"</code>.     This choice indicates that the question will be presented to the participant as a radio button selection,     providing a simple and clear interface for response selection.</p> </li> <li> <p>In the responseOptions, the <code>valueType</code> is defined as <code>\"xsd:string\"</code>, signifying that the expected type of response is a string.     The multipleChoice field is set to false, indicating that participants can only select one of the provided options.</p> </li> <li> <p>The <code>choices</code> array lists the possible responses.     In this case, there are two: \"Yes\" and \"No\", each with a corresponding value (1 for Yes, 2 for No)     and translations provided for English (\"en\") and Spanish (\"es\").</p> </li> <li> <p>For the speech task in our demo project, the configuration of ui <code>inputType</code> and <code>responseOptions</code> is distinctively tailored     to facilitate audio data collection:</p> <pre><code>\"ui\": {\n    \"inputType\": \"audioPassageRecord\"\n},\n\"responseOptions\": {\n    \"valueType\": \"schema:AudioObject\",\n    \"minValue\": 0,\n    \"maxValue\": 60000\n}\n</code></pre> </li> <li> <p>In the ui section, the <code>inputType</code> is set to <code>\"audioPassageRecord\"</code>.     This specific input type is designed to enable participants to record an audio passage directly within the questionnaire interface.</p> </li> <li> <p>The <code>responseOptions</code> are configured to accommodate the nature of audio data.</p> </li> <li> <p>The <code>valueType</code> is specified as \"schema:AudioObject\", indicating that the response will be an audio file.</p> </li> <li> <p>The fields <code>minValue</code> and <code>maxValue</code> define the allowable duration of the audio recording in milliseconds.     In this case, the maximum duration is set to 60,000 milliseconds (or 1 minute).</p> </li> </ul>"},{"location":"user-guide/create-new-assess/#step-2-integrating-additional-components-for-activity-specific-needs","title":"Step 2: Integrating additional components for activity-specific needs","text":"<p>We can integrate additional components tailored to the unique requirements of specific activities. For instance, considering the unique needs of our speech task, we add an 'audio check' component to confirm the functionality of the audio recording feature.</p> <ol> <li> <p>Setting up an audio check for the speech task</p> <p>To ensure the effectiveness of our speech task, we create an activity for audio verification within the <code>activities</code> folder, naming it <code>0_audio</code>. This folder contains the <code>audio_check_schema</code>, a schema specifically designed to test and confirm that the audio recording system is operational and effective for participants.</p> </li> <li> <p>Contextual and properties configuration for audio check</p> <pre><code>\"@context\": [\n    \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc4/contexts/generic\",\n    {\n        \"voice\": \"https://github.com/ReproNim/reproschema-library/tree/master/activities/VoiceTask/items\"\n    }\n]\n</code></pre> </li> </ol> <p>The <code>@context</code> section includes a specific context link under \"voice\", pointing to the repository with items relevant to voice and audio tasks: <code>https://github.com/ReproNim/reproschema-library/tree/master/activities/VoiceTask/items</code> This targeted link ensures that the audio check activity aligns with the specific requirements of voice-related tasks.</p> <p>The ui's <code>addProperties</code> array is tailored for the audio check. We define a property <code>\"variableName\": \"audio_check\"</code> linked to <code>\"isAbout\": \"voice:audio_check\"</code>.</p>"},{"location":"user-guide/create-new-protocol/","title":"Creating a Research Protocol Using Cookiecutter","text":"<p>Ready for your first ReproSchema project?! We are going to use the Reproschema Protocol Cookiecutter to create a demo protocol.</p>"},{"location":"user-guide/create-new-protocol/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Prerequisite:     Ensure you have Git and Cookiecutter installed on your system. If not, please refer to the installation guides for Git and Cookiecutter.</p> </li> <li> <p>Generate your Repository:     Use the Reproschema Protocol Cookiecutter to create a new repository for your research protocol.     Run the following command in your terminal:</p> <pre><code>cookiecutter gh:ReproNim/reproschema-protocol-cookiecutter\n</code></pre> </li> <li> <p>Follow the prompts to customize your new protocol,     more details see here</p> </li> </ol>"},{"location":"user-guide/create-new-protocol/#customizing-your-protocol","title":"Customizing Your Protocol","text":"<p>Once you run the Cookiecutter command, you will be prompted to make choices for your protocol, ranging from 1-5. These choices generate corresponding activities in your repository. Here's what you can do with these activities:</p> <ol> <li> <p>Use as templates:     The activities created based on your choices serve as templates.     You can use these to understand the structure and elements within the activities folder.     This is particularly useful if you're new to ReproSchema.     By exploring these templates, you'll get a clearer picture of how activities are structured and what kind of information they contain.</p> </li> <li> <p>Delete and start fresh:     Alternatively, if you already have a clear idea of what your protocol needs, you can delete these generated activities.     This allows you to start from scratch, creating activities that are tailored specifically to your research needs.</p> </li> </ol> <p>The inclusion of activity choices aims to provide users with a practical understanding of how activities are structured within ReproSchema protocols. Whether you use these as a starting point or prefer to create your own from the ground up, these templates are there to guide you in structuring your research protocol effectively.</p> <p>We provide more detailed instructions for customizing your protocol in the following pages using reproschema-demo-protocol as an example.</p>"},{"location":"user-guide/finalize-protocol/","title":"Finalizing the Protocol","text":"<p>After setting up individual activities, we return to the main protocol schema to organize everything cohesively. This step involves structuring the 'DemoProtocol_schema' to include all the activities we have developed, defining their sequence and presentation within the overall research protocol. In the 'DemoProtocol_schema', located in the 'DemoProtocol' folder, we integrate each activity schema using the following approach:</p> <ol> <li> <p>Context and protocol definition</p> <p>The <code>@context</code>, <code>@type</code>, <code>@id</code>, and descriptive fields (<code>prefLabel</code>, <code>description</code>, etc.) provide the foundational information about the protocol.</p> </li> <li> <p>Inclusion of activities</p> <p>The ui section's addProperties array is crucial. Here, each activity schema we've created is referenced under <code>isAbout</code>, with its respective <code>variableName</code> and <code>prefLabel</code>. For example, the <code>audio</code> activity is linked as</p> <pre><code>{\n    \"isAbout\": \"../activities/0_audio/audio_check_schema\",\n    \"variableName\": \"audio_check_schema\",\n    \"prefLabel\": {\"en\": \"Audio Check\"}\n}\n</code></pre> </li> </ol> <p>This structure is repeated for each activity, including audio check, demographics, psychological questions, clinical questions, speech task, and feedback.</p> <ol> <li> <p>Order of presentation</p> <p>The order array within ui specifies the sequence in which these activities will appear in the protocol. It's arranged to flow logically from consent, through various assessments, to the final feedback, ensuring a structured participant experience. For instance, the order starts with <code>../activities/0_audio/audio_check_schema</code> and progresses through to <code>../activities/5_feedback/feedback_schema</code>.</p> </li> <li> <p>Additional UI settings</p> <ul> <li><code>\"shuffle\"</code> is set to false to maintain the specified order.</li> <li><code>\"allow\"</code> includes functionalities such as <code>\"reproschema:AllowExport\"</code> for data exporting options.</li> </ul> </li> <li> <p>Update README.md</p> <p>Give clear and concise instructions on what this protocol is about and how participants should use it.</p> </li> </ol> <p>Upon finalizing our protocol with the integrated activities, the end result is a fully interactive research tool hosted on our GitHub repository. For data collection, this tool can be linked to a backend server, or participants can be given the option to export their data directly.</p>"},{"location":"user-guide/setup-feedback/","title":"Adding a customized feedback section","text":"<p>To conclude our protocol, we integrate a customized feedback activity. This choice of ending with participant feedback is just one of many possibilities, demonstrating the adaptability of ReproSchema to diverse research needs.</p> <pre><code>{\n    \"@context\": \"https://raw.githubusercontent.com/ReproNim/reproschema/1.0.0-rc4/contexts/generic\",\n    \"@type\": \"reproschema:Field\",\n    \"@id\": \"feedback.jsonld\",\n    \"prefLabel\": \"Feedback\",\n    \"description\": \"schema to record text response of overall feedback of the protocol\",\n    \"schemaVersion\": \"1.0.0-rc4\",\n    \"version\": \"0.0.1\",\n    \"question\": {\n        \"en\": \"Please leave any comments or suggestions on the study so we can improve it (or skip):\",\n        \"es\": \"Deje cualquier comentario o sugerencia sobre el estudio para que podamos mejorarlo (u omitir):\"\n    },\n    \"ui\": {\n        \"inputType\": \"textarea\"\n    },\n    \"responseOptions\": {\n        \"valueType\": \"xsd:string\"\n    }\n}\n</code></pre> <p>The <code>feedback</code> item in this activity (<code>5_feedback</code>) is specifically designed to gather open-ended responses, allowing participants to share their thoughts and suggestions:</p> <ul> <li> <p>Item Structure: The item <code>feedback</code> is set up with an identification and   purpose, indicated by its <code>@id</code> and descriptive fields.</p> </li> <li> <p>Question Prompt: The <code>question</code> is presented in both English and Spanish,   encouraging participants to provide comments on their study experience. It\u2019s   formatted to be inclusive, giving participants the option to skip if they   choose.</p> </li> <li> <p>UI Configuration for Open Responses: The choice of <code>textarea</code> as the   <code>inputType</code> in the ui configuration facilitates extended text input, enabling   participants to express detailed feedback comfortably. Accordingly,   <code>valueType</code> in the <code>responseOptions</code> has been set as <code>\"xsd:string\"</code>.</p> </li> </ul>"},{"location":"user-guide/tools/","title":"Toolkit","text":"<p>In the world of research data management, flexibility and compatibility are key. Understanding this, we provide specialized tools designed to create, validate schemas, and convert data between ReproSchema format and REDCap CSV format. Whether you're transitioning from REDCap to ReproSchema or vice versa, these tools ensure a smooth and efficient conversion process, preserving the integrity and structure of your data.</p>"},{"location":"user-guide/tools/#install-reproschema-py","title":"Install reproschema-py","text":"<pre><code>pip install reproschema\n</code></pre>"},{"location":"user-guide/tools/#cli-usage","title":"CLI usage","text":"<p><code>reproschema-py</code> can be used as a Commend-Line Interface.</p> <pre><code>$ reproschema\nUsage: reproschema [OPTIONS] COMMAND [ARGS]...\n\n  A client to support interactions with ReproSchema\n\n  To see help for a specific command, run\n\n  reproschema COMMAND --help     e.g. reproschema validate --help\n\nOptions:\n  --version\n  -l, --log-level [DEBUG|INFO|WARNING|ERROR|CRITICAL]\n                                  Log level name  [default: INFO]\n  --help                          Show this message and exit.\n\nCommands:\n  convert\n  create\n  redcap2reproschema  Convert REDCap CSV files to Reproschema format.\n  reproschema2redcap  Convert reproschema protocol to REDCap CSV format.\n  serve\n  validate\n</code></pre>"},{"location":"user-guide/tools/#reproschema2redcap-usage","title":"<code>reproschema2redcap</code> Usage","text":"<p>To convert ReproSchema protocol to REDCap CSV format, use the following command</p> <pre><code>reproschema reproschema2redcap &lt;input_dir_path&gt; &lt;output_csv_filename&gt;\n</code></pre> <ul> <li><code>&lt;input_dir_path&gt;</code>: The path to the root folder of a protocol. For example, to convert the reproschema-demo-protocol provided by ReproNim, you can use the following commands:</li> </ul> <pre><code>git clone https://github.com/ReproNim/reproschema-demo-protocol.git\ncd reproschema-demo-protocol\npwd\n</code></pre> <p>In this case, the output from <code>pwd</code> (which shows your current directory path)should be your <code>&lt;input_dir_path&gt;</code>.</p> <ul> <li><code>&lt;output_csv_filename&gt;</code>: The name of the output CSV file where the converted data will be saved.</li> </ul>"},{"location":"user-guide/tools/#redcap2reproschema-usage","title":"<code>redcap2reproschema</code> Usage","text":"<p>The <code>redcap2reproschema</code> function is designed to process a given REDCap CSV file and YAML configuration to generate the output in the reproschema format.</p>"},{"location":"user-guide/tools/#prerequisites","title":"Prerequisites","text":"<p>Before the conversion, ensure you have the following:</p> <p>YAML Configuration File:</p> <ul> <li>Download templates/redcap2rs.yaml and fill it out with your protocol details.</li> </ul>"},{"location":"user-guide/tools/#yaml-file-configuration","title":"YAML File Configuration","text":"<p>In the <code>templates/redcap2rs.yaml</code> file, provide the following information:</p> <ul> <li>protocol_name: This is a unique identifier for your protocol. Use underscores for spaces and avoid special characters.</li> <li>protocol_display_name: The name that will appear in the application.</li> <li>protocol_description: A brief description of your protocol.</li> </ul> <p>Example:</p> <pre><code>protocol_name: \"My_Protocol\"\nprotocol_display_name: \"Assessment Protocol\"\nprotocol_description: \"This protocol is for assessing cognitive skills.\"\n</code></pre> <p>The <code>redcap2reproschema</code> function has been integrated into a CLI tool, use the following command:</p> <pre><code>reproschema redcap2reproschema path/to/your_redcap_data_dic.csv path/to/your_redcap2rs.yaml\n</code></pre> <p>Those tools can also be used as Python functions. For detailed instructions, please visit reproschema-py.</p>"}]}